<?php
/**
 * UserData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Facebook Conversions API (for Web)
 *
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: web_signals_integrations@fb.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserData Class Doc Comment
 *
 * @category Class
 * @description user_data is a set of identifiers Facebook can use for targeted attribution. You must provide at least one of the following user_data keys in your request
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'user_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'em' => 'string',
'ph' => 'string',
'ge' => 'string',
'db' => 'string',
'ln' => 'string',
'fn' => 'string',
'ct' => 'string',
'country' => 'string',
'st' => 'string',
'zp' => 'string',
'external_id' => 'string',
'client_ip_address' => 'string',
'client_user_agent' => 'string',
'fbc' => 'string',
'fbp' => 'string',
'subscription_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'em' => 'SHA-256',
'ph' => 'SHA-256',
'ge' => 'SHA-256',
'db' => 'SHA-256',
'ln' => 'SHA-256',
'fn' => 'SHA-256',
'ct' => 'SHA-256',
'country' => 'SHA256',
'st' => 'SHA256',
'zp' => 'SHA256',
'external_id' => 'SHA256',
'client_ip_address' => null,
'client_user_agent' => null,
'fbc' => null,
'fbp' => null,
'subscription_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'em' => 'em',
'ph' => 'ph',
'ge' => 'ge',
'db' => 'db',
'ln' => 'ln',
'fn' => 'fn',
'ct' => 'ct',
'country' => 'country',
'st' => 'st',
'zp' => 'zp',
'external_id' => 'external_id',
'client_ip_address' => 'client_ip_address',
'client_user_agent' => 'client_user_agent',
'fbc' => 'fbc',
'fbp' => 'fbp',
'subscription_id' => 'subscription_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'em' => 'setEm',
'ph' => 'setPh',
'ge' => 'setGe',
'db' => 'setDb',
'ln' => 'setLn',
'fn' => 'setFn',
'ct' => 'setCt',
'country' => 'setCountry',
'st' => 'setSt',
'zp' => 'setZp',
'external_id' => 'setExternalId',
'client_ip_address' => 'setClientIpAddress',
'client_user_agent' => 'setClientUserAgent',
'fbc' => 'setFbc',
'fbp' => 'setFbp',
'subscription_id' => 'setSubscriptionId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'em' => 'getEm',
'ph' => 'getPh',
'ge' => 'getGe',
'db' => 'getDb',
'ln' => 'getLn',
'fn' => 'getFn',
'ct' => 'getCt',
'country' => 'getCountry',
'st' => 'getSt',
'zp' => 'getZp',
'external_id' => 'getExternalId',
'client_ip_address' => 'getClientIpAddress',
'client_user_agent' => 'getClientUserAgent',
'fbc' => 'getFbc',
'fbp' => 'getFbp',
'subscription_id' => 'getSubscriptionId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['em'] = isset($data['em']) ? $data['em'] : null;
        $this->container['ph'] = isset($data['ph']) ? $data['ph'] : null;
        $this->container['ge'] = isset($data['ge']) ? $data['ge'] : null;
        $this->container['db'] = isset($data['db']) ? $data['db'] : null;
        $this->container['ln'] = isset($data['ln']) ? $data['ln'] : null;
        $this->container['fn'] = isset($data['fn']) ? $data['fn'] : null;
        $this->container['ct'] = isset($data['ct']) ? $data['ct'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['st'] = isset($data['st']) ? $data['st'] : null;
        $this->container['zp'] = isset($data['zp']) ? $data['zp'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['client_ip_address'] = isset($data['client_ip_address']) ? $data['client_ip_address'] : null;
        $this->container['client_user_agent'] = isset($data['client_user_agent']) ? $data['client_user_agent'] : null;
        $this->container['fbc'] = isset($data['fbc']) ? $data['fbc'] : null;
        $this->container['fbp'] = isset($data['fbp']) ? $data['fbp'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets em
     *
     * @return string
     */
    public function getEm()
    {
        return $this->container['em'];
    }

    /**
     * Sets em
     *
     * @param string $em A hashed email address in lower case using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setEm($em)
    {
        $this->container['em'] = $em;

        return $this;
    }

    /**
     * Gets ph
     *
     * @return string
     */
    public function getPh()
    {
        return $this->container['ph'];
    }

    /**
     * Sets ph
     *
     * @param string $ph A hashed phone number using SHA-256 algorithm. Include only digits with country code, area code, and number.
     *
     * @return $this
     */
    public function setPh($ph)
    {
        $this->container['ph'] = $ph;

        return $this;
    }

    /**
     * Gets ge
     *
     * @return string
     */
    public function getGe()
    {
        return $this->container['ge'];
    }

    /**
     * Sets ge
     *
     * @param string $ge A hashed gender (f or m) using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setGe($ge)
    {
        $this->container['ge'] = $ge;

        return $this;
    }

    /**
     * Gets db
     *
     * @return string
     */
    public function getDb()
    {
        return $this->container['db'];
    }

    /**
     * Sets db
     *
     * @param string $db A hashed date of birth given as year, month, and day using SHA-256 algorithm
     *
     * @return $this
     */
    public function setDb($db)
    {
        $this->container['db'] = $db;

        return $this;
    }

    /**
     * Gets ln
     *
     * @return string
     */
    public function getLn()
    {
        return $this->container['ln'];
    }

    /**
     * Sets ln
     *
     * @param string $ln A hashed last name in lowercase using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setLn($ln)
    {
        $this->container['ln'] = $ln;

        return $this;
    }

    /**
     * Gets fn
     *
     * @return string
     */
    public function getFn()
    {
        return $this->container['fn'];
    }

    /**
     * Sets fn
     *
     * @param string $fn A hashed first name in lowercase using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setFn($fn)
    {
        $this->container['fn'] = $fn;

        return $this;
    }

    /**
     * Gets ct
     *
     * @return string
     */
    public function getCt()
    {
        return $this->container['ct'];
    }

    /**
     * Sets ct
     *
     * @param string $ct A hashed city in lower-case without spaces or punctuation using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setCt($ct)
    {
        $this->container['ct'] = $ct;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country A hashed two-letter country code in lowercase using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets st
     *
     * @return string
     */
    public function getSt()
    {
        return $this->container['st'];
    }

    /**
     * Sets st
     *
     * @param string $st A hashed two-letter state code in lowercase using SHA-256 algorithm.
     *
     * @return $this
     */
    public function setSt($st)
    {
        $this->container['st'] = $st;

        return $this;
    }

    /**
     * Gets zp
     *
     * @return string
     */
    public function getZp()
    {
        return $this->container['zp'];
    }

    /**
     * Sets zp
     *
     * @param string $zp A hashed zip code using SHA-256 algorithm. If you are in the United States, this is a five-digit zip code. For other locations, follow each country's standards.
     *
     * @return $this
     */
    public function setZp($zp)
    {
        $this->container['zp'] = $zp;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Any unique ID from the advertiser, such as loyalty membership IDs, user IDs, and external cookie IDs. If External ID is being sent via other channels, it should be sent in the same format via Conversions API. Hashing external_id using SHA-256 algorithm is optional.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets client_ip_address
     *
     * @return string
     */
    public function getClientIpAddress()
    {
        return $this->container['client_ip_address'];
    }

    /**
     * Sets client_ip_address
     *
     * @param string $client_ip_address The IP address of the browser corresponding to the event.
     *
     * @return $this
     */
    public function setClientIpAddress($client_ip_address)
    {
        $this->container['client_ip_address'] = $client_ip_address;

        return $this;
    }

    /**
     * Gets client_user_agent
     *
     * @return string
     */
    public function getClientUserAgent()
    {
        return $this->container['client_user_agent'];
    }

    /**
     * Sets client_user_agent
     *
     * @param string $client_user_agent The user agent for the browser corresponding to the event.
     *
     * @return $this
     */
    public function setClientUserAgent($client_user_agent)
    {
        $this->container['client_user_agent'] = $client_user_agent;

        return $this;
    }

    /**
     * Gets fbc
     *
     * @return string
     */
    public function getFbc()
    {
        return $this->container['fbc'];
    }

    /**
     * Sets fbc
     *
     * @param string $fbc The Facebook click ID value stored in the _fbc browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc), or generate this value from a fbclid query parameter.
     *
     * @return $this
     */
    public function setFbc($fbc)
    {
        $this->container['fbc'] = $fbc;

        return $this;
    }

    /**
     * Gets fbp
     *
     * @return string
     */
    public function getFbp()
    {
        return $this->container['fbp'];
    }

    /**
     * Sets fbp
     *
     * @param string $fbp The Facebook browser ID value stored in the _fbp browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc).
     *
     * @return $this
     */
    public function setFbp($fbp)
    {
        $this->container['fbp'] = $fbp;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string $subscription_id The subscription ID for the user in this transaction. This is similar to the order ID for an individual product.
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
